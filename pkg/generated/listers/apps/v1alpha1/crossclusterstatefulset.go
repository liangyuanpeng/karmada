/*
Copyright The Karmada Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/karmada-io/karmada/pkg/apis/apps/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CrossClusterStatefulSetLister helps list CrossClusterStatefulSets.
// All objects returned here must be treated as read-only.
type CrossClusterStatefulSetLister interface {
	// List lists all CrossClusterStatefulSets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CrossClusterStatefulSet, err error)
	// CrossClusterStatefulSets returns an object that can list and get CrossClusterStatefulSets.
	CrossClusterStatefulSets(namespace string) CrossClusterStatefulSetNamespaceLister
	CrossClusterStatefulSetListerExpansion
}

// crossClusterStatefulSetLister implements the CrossClusterStatefulSetLister interface.
type crossClusterStatefulSetLister struct {
	indexer cache.Indexer
}

// NewCrossClusterStatefulSetLister returns a new CrossClusterStatefulSetLister.
func NewCrossClusterStatefulSetLister(indexer cache.Indexer) CrossClusterStatefulSetLister {
	return &crossClusterStatefulSetLister{indexer: indexer}
}

// List lists all CrossClusterStatefulSets in the indexer.
func (s *crossClusterStatefulSetLister) List(selector labels.Selector) (ret []*v1alpha1.CrossClusterStatefulSet, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CrossClusterStatefulSet))
	})
	return ret, err
}

// CrossClusterStatefulSets returns an object that can list and get CrossClusterStatefulSets.
func (s *crossClusterStatefulSetLister) CrossClusterStatefulSets(namespace string) CrossClusterStatefulSetNamespaceLister {
	return crossClusterStatefulSetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CrossClusterStatefulSetNamespaceLister helps list and get CrossClusterStatefulSets.
// All objects returned here must be treated as read-only.
type CrossClusterStatefulSetNamespaceLister interface {
	// List lists all CrossClusterStatefulSets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CrossClusterStatefulSet, err error)
	// Get retrieves the CrossClusterStatefulSet from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.CrossClusterStatefulSet, error)
	CrossClusterStatefulSetNamespaceListerExpansion
}

// crossClusterStatefulSetNamespaceLister implements the CrossClusterStatefulSetNamespaceLister
// interface.
type crossClusterStatefulSetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CrossClusterStatefulSets in the indexer for a given namespace.
func (s crossClusterStatefulSetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CrossClusterStatefulSet, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CrossClusterStatefulSet))
	})
	return ret, err
}

// Get retrieves the CrossClusterStatefulSet from the indexer for a given namespace and name.
func (s crossClusterStatefulSetNamespaceLister) Get(name string) (*v1alpha1.CrossClusterStatefulSet, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("crossclusterstatefulset"), name)
	}
	return obj.(*v1alpha1.CrossClusterStatefulSet), nil
}
