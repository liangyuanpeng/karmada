name: APIServer compatibility
on:
  # schedule:
  #   # Run this workflow "At 20:00 UTC on Sunday and Saturday"
  #   - cron: '0 20 * * 0,6'
  # push:
  workflow_call:
    inputs:
      repo:
        description: 'repo of karmada'
        required: false
        default: "karmada-io/karmada"
        type: string


jobs:
  e2e:
    name: e2e test
    # prevent job running from forked repository
    # if: ${{ github.repository == 'karmada-io/karmada' }}
    runs-on: ubuntu-22.04
    # if: contains(matrix.karmada-version,'')
    strategy:
      fail-fast: false
      matrix:
        # kubeapiserver-version: [ v1.25.0, v1.26.0, v1.27.3, v1.28.0 ]
        kubeapiserver-version: [ v1.25.0 ]
        # kubeapiserver-version: [  v1.28.0 ]
        # karmada-version: [ release-1.5, release-1.6 ]
        karmada-version: [ karmada_apiserver_upgrade ]

        include:
        # - karmada-version: release-1.5
        #   go-version: 1.19.5

        # - karmada-version: release-1.6
        #   go-version: 1.20.5

        # - karmada-version: release-1.7
        #   go-version: 1.20.6

        # - karmada-version: comment
        #   go-version: 1.20.10

        - karmada-version: karmada_apiserver_upgrade
          go-version: 1.20.10

    steps:
      # Free up disk space on Ubuntu
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          # this might remove tools that are actually needed, if set to "true" but frees about 6 GB
          tool-cache: false
          # all of these default to true, but feel free to set to "false" if necessary for your workflow
          android: true
          dotnet: true
          haskell: true
          large-packages: false
          docker-images: false
          swap-storage: false
      - name: checkout code
        uses: actions/checkout@v3
        with:
          # Number of commits to fetch. 0 indicates all history for all branches and tags.
          # We need to guess version via git tags.
          fetch-depth: 0
          ref: ${{ matrix.karmada-version }}
          repository: ${{ inputs.repo }}
      # - name: echo 
      #   run: |
      #     echo ${{ matrix.karmada-version }}
      #     echo "========================="
      #     echo ${{ matrix.go-version }}
      - name: install Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go-version }}
      # - name: print 
      #   run: |
      #     random_num=$((RANDOM % 10))
      #     echo "random_num:"$random_num
      #     if [ $random_num -gt 5 ]; then
      #       echo "Failed"
      #       exit 1
      #     else
      #       echo "Success" 
      #       exit 0
      #     fi
      - name: setup e2e test environment
        run: |
          hack/local-up-karmada.sh


          kubectl --kubeconfig=${HOME}/.kube/karmada.config --context=karmada-host get po -A

          # Update images
          kubectl --kubeconfig=${HOME}/.kube/karmada.config --context=karmada-host \
            set image deployment/karmada-apiserver -nkarmada-system \
            karmada-apiserver=registry.k8s.io/kube-apiserver:${{ matrix.kubeapiserver-version }}
          kubectl --kubeconfig=${HOME}/.kube/karmada.config --context=karmada-host \
            set image deployment/karmada-kube-controller-manager -nkarmada-system \
            kube-controller-manager=registry.k8s.io/kube-controller-manager:${{ matrix.kubeapiserver-version }}

          kubectl --kubeconfig=${HOME}/.kube/karmada.config --context=karmada-host \
          -n karmada-system scale --replicas 0 deploy karmada-apiserver
          kubectl --kubeconfig=${HOME}/.kube/karmada.config --context=karmada-host \
          -n karmada-system scale --replicas 1 deploy karmada-apiserver

          kubectl --kubeconfig=${HOME}/.kube/karmada.config --context=karmada-host \
          -n karmada-system scale --replicas 0 deploy karmada-kube-controller-manager
          kubectl --kubeconfig=${HOME}/.kube/karmada.config --context=karmada-host \
          -n karmada-system scale --replicas 1 deploy karmada-kube-controller-manager

          sleep 30
          kubectl --kubeconfig=${HOME}/.kube/karmada.config --context=karmada-host get po -A
          kubectl --kubeconfig=${HOME}/.kube/karmada.config --context=karmada-host describe deployment karmada-kube-controller-manager -nkarmada-system

          # Wait ready
          kubectl --kubeconfig=${HOME}/.kube/karmada.config --context=karmada-host \
            rollout status deployment/karmada-kube-controller-manager -nkarmada-system --timeout=2m
          kubectl --kubeconfig=${HOME}/.kube/karmada.config --context=karmada-host \
            rollout status deployment/karmada-apiserver -nkarmada-system --timeout=2m
      - name: run e2e
        run: |
          export ARTIFACTS_PATH=${{ github.workspace }}/karmada-e2e-logs/${{ matrix.kubeapiserver-version }}-${{ matrix.karmada-version }}/
          hack/run-e2e.sh
      - name: upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: karmada_e2e_log_${{ matrix.k8s }}
          path: ${{ github.workspace }}/karmada-e2e-logs/${{ matrix.kubeapiserver-version }}-${{ matrix.karmada-version }}/

  comment:
    name: comment
    runs-on: ubuntu-22.04
    needs: [e2e]
    if: ${{ always() }}
    env:
     RUN_ID: ${{ github.run_id }}
     GH_TOKEN: ${{ github.token }}
    steps:
      - name: comment to pr
        run: |
          touch comment.log
          echo "Hi, Here is a bot message for karmada APIServer compatibility, Run with PR karmada_apiserver_upgrade ( comment trigger/schedule for release ) " >> comment.log
          #echo "NOTE: This job status is random now." >> comment.log
          echo ""  >> comment.log
          echo "CI with repo: " ${{ inputs.repo }} >>  comment.log
          echo ""  >> comment.log
          echo "| Job | Status | conclusion | html_url |"  >> comment.log
          echo "|:--|:--|:--|:--|" >> comment.log
          gh api /repos/liangyuanpeng/karmada/actions/runs/$RUN_ID/jobs | jq . > info.json
          jq -r '.jobs[] | select(.name != "call_karmada / comment") | [.name, .status, .conclusion, .html_url] | @csv' info.json | sed 's/","/|/g' | sed 's/"//g' >> comment.log
          echo "=========================="
          cat comment.log
          gh issue comment -R liangyuanpeng/karmada 6 -F comment.log
          